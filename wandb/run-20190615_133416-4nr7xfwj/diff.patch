diff --git a/keras_cnn.py b/keras_cnn.py
index 879d732..e3e7836 100644
--- a/keras_cnn.py
+++ b/keras_cnn.py
@@ -6,6 +6,7 @@ from keras.utils import np_utils
 from wandb.keras import WandbCallback
 import wandb
 import os
+import sys
 
 run = wandb.init()
 config = run.config
@@ -16,7 +17,7 @@ config.dropout = 0.2
 config.dense_layer_size = 128
 config.img_width = 28
 config.img_height = 28
-config.epochs = 10
+config.epochs = 20
 
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
 
@@ -28,9 +29,10 @@ X_test /= 255.
 # reshape input data
 X_train = X_train.reshape(
     X_train.shape[0], config.img_width, config.img_height, 1)
+#no. of data points x img_width x img_height x channels(RGB) 'Only for Keras' Lookup for Pytorch
 X_test = X_test.reshape(
     X_test.shape[0], config.img_width, config.img_height, 1)
-
+print(X_train.shape)
 # one hot encode outputs
 y_train = np_utils.to_categorical(y_train)
 y_test = np_utils.to_categorical(y_test)
@@ -44,15 +46,15 @@ model.add(Conv2D(32,
                  input_shape=(28, 28, 1),
                  activation='relu'))
 model.add(MaxPooling2D(pool_size=(2, 2)))
-model.add(Dropout(0.4))
+model.add(Dropout(0.2))
 model.add(Conv2D(64,
                  (3, 3),
                  activation='relu'))
 model.add(MaxPooling2D(pool_size=(2, 2)))
-model.add(Dropout(0.4))
+model.add(Dropout(0.05))
 model.add(Flatten())
 model.add(Dense(config.dense_layer_size, activation='relu'))
-model.add(Dropout(0.4))
+model.add(Dropout(0.2))
 model.add(Dense(num_classes, activation='softmax'))
 
 model.compile(loss='categorical_crossentropy', optimizer='adam',
@@ -60,5 +62,5 @@ model.compile(loss='categorical_crossentropy', optimizer='adam',
 model.summary()
 
 model.fit(X_train, y_train, validation_data=(X_test, y_test),
-          epochs=config.epochs,
+          epochs=config.epochs,batch_size=256,
           callbacks=[WandbCallback(data_type="image", save_model=False)])
